#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		НовоеУведомление = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		НовоеУведомление.ТекстСообщения = "Создан новый документ";
		НовоеУведомление.Записать();		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВКМ_ОбслуживаниеКлиента.ДатаПроведенияРабот КАК ДатаРабот,
		|	ВКМ_ОбслуживаниеКлиента.ВремяНачалаРаботПлан КАК ВремяНачала,
		|	ВКМ_ОбслуживаниеКлиента.ВремяОкончанияРаботПлан КАК ВремяОкончания,
		|	ВКМ_ОбслуживаниеКлиента.Специалист КАК Специалист
		|ИЗ
		|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
		|ГДЕ
		|	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДатаРаботДокумента = Выборка.ДатаРабот;
			ВремяНачалаДокумента = Выборка.ВремяНачала;
			ВремяОкончанияДокумента = Выборка.ВремяОкончания;
			СпециалистДокумента = Выборка.Специалист;
		КонецЕсли;
		
		Если ДатаРаботДокумента <> ДатаПроведенияРабот Тогда
			НовоеУведомление = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НовоеУведомление.ТекстСообщения = СтрШаблон("В документе %1 изменилась плановая дата проведения работ", Ссылка);
			НовоеУведомление.Записать();
		КонецЕсли;
		
		Если ВремяНачалаДокумента <> ВремяНачалаРаботПлан Тогда
			НовоеУведомление = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НовоеУведомление.ТекстСообщения = СтрШаблон("В документе %1 изменилось плановое время начала работ", Ссылка);
			НовоеУведомление.Записать();
		КонецЕсли;
		
		Если ВремяОкончанияДокумента <> ВремяОкончанияРаботПлан Тогда
			НовоеУведомление = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НовоеУведомление.ТекстСообщения = СтрШаблон("В документе %1 изменилось плановое время окончания работ", Ссылка);
			НовоеУведомление.Записать();
		КонецЕсли;
		
		Если СпециалистДокумента <> Специалист Тогда
			НовоеУведомление = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НовоеУведомление.ТекстСообщения = СтрШаблон("В документе %1 изменился специалист", Ссылка);
			НовоеУведомление.Записать();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ,Режим)
	
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВКМ_ОбслуживаниеКлиента.Договор.ВКМ_ДатаНачала КАК ДатаНачала,
	|	ВКМ_ОбслуживаниеКлиента.Договор.ВКМ_ДатаОкончания КАК ДатаОкончания,
	|	ВКМ_ОбслуживаниеКлиента.Договор.ВКМ_СуммаАбонентскойПлаты КАК СуммаАбонентскойПлаты,
	|	ВКМ_ОбслуживаниеКлиента.Договор.ВКМ_СтоимостьЧасаРаботы КАК СтоимостьЧасаРаботы,
	|	ВКМ_ОбслуживаниеКлиента.Специалист.Представление КАК Специалист,
	|	ВКМ_ОбслуживаниеКлиента.Договор.Представление КАК Договор,
	|	ВКМ_ОбслуживаниеКлиента.Договор.ВидДоговора КАК ВидДоговора,
	|	ВКМ_ОбслуживаниеКлиента.ДатаПроведенияРабот КАК ДатаПроведенияРабот,
	|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.Оклад КАК Оклад,
	|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот КАК ПроцентОтРабот
	|ИЗ
	|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&МоментВремени,) КАК
	|			ВКМ_УсловияОплатыСотрудниковСрезПоследних
	|		ПО ВКМ_ОбслуживаниеКлиента.Специалист = ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник
	|ГДЕ
	|	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка
	|	И ВКМ_ОбслуживаниеКлиента.Договор.ВидДоговора = &ВидДоговора
	|	И ВКМ_ОбслуживаниеКлиента.ДатаПроведенияРабот
	|		МЕЖДУ ВКМ_ОбслуживаниеКлиента.Договор.ВКМ_ДатаНачала И ВКМ_ОбслуживаниеКлиента.Договор.ВКМ_ДатаОкончания";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(Выборка.ПроцентОтРабот) Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Специалисту: %1 не установлен 'Процент оплаты от работ'. Проведение документа невозможно. ", Выборка.Специалист));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
				
		// регистр накопления ВКМ_ВыполненныеСотрудникомРаботы
		Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
		Движение.Период = Дата;
		Движение.Сотрудник = Специалист;
		Движение.ЧасовКОплате = ВыполненныеРаботы.Итог("ФактическиПотраченоЧасов");
		Если Выборка.ПроцентОтРабот = 0 Тогда
			Движение.СуммаКОплате = Движение.ЧасовКОплате * Выборка.СтоимостьЧасаРаботы / 100;
		Иначе
			Движение.СуммаКОплате = Движение.ЧасовКОплате * Выборка.СтоимостьЧасаРаботы * Выборка.ПроцентОтРабот / 100;
		КонецЕсли;
		
		// регистр накопления ВКМ_ВыполненныеКлиентуРаботы
		Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Договор = Договор;
		Движение.КоличествоЧасов = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту");
		Движение.СуммаКОплате = Движение.КоличествоЧасов * Выборка.СтоимостьЧасаРаботы;
			
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Выбранный договор не является договором с абонентской платой или срок его действия окончен. Выберите актуальный договор");
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли